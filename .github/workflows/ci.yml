name: CI Workflow

on:
  pull_request:
    branches: [ "main", "dev" ]
  push:
    branches-ignore: [ "main" ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Check formatting with gofmt
        run: |
          echo "Checking code formatting with gofmt..."
          # Only check the server folder (where your .go files live):
          unformatted=$(gofmt -l server)
          if [ -n "$unformatted" ]; then
            echo "The following files are not formatted:"
            echo "$unformatted"
            exit 1
          fi

      - name: Install golangci-lint
        run: |
          echo "Installing golangci-lint v1.53.3..."
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh \
            | sh -s -- -b $(go env GOPATH)/bin v1.53.3

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          # If .golangci.yml is at the repo root:
          config: .golangci.yml
          # This ensures the lint command runs in server/ (where go.mod is):
          working-directory: server
          # Optional argument: increase default timeout
          args: --timeout=5m

      - name: Run go vet
        run: |
          cd server
          go vet ./...

      - name: Run tests
        run: |
          cd server
          go test ./... -v
